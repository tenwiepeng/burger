{"version":3,"sources":["components/Order/Order.js","containers/Orders/Orders.js"],"names":["Order","props","ingredientSummary","Object","keys","counts","map","igKey","inputString","slice","toLowerCase","toUpperCase","newString","i","length","match","key","style","textTransform","display","margin","border","backgroundColor","borderRadius","padding","seeds","className","price","Orders","this","onFetchOrders","token","userId","orders","Spinner","light","loading","order","id","ingredients","Component","connect","state","auth","dispatch","actions","withErrorHandler","axios"],"mappings":"mOAwDeA,G,OApDD,SAACC,GACb,IAAIC,EAAoBC,OAAOC,KAAKH,EAAMI,QAAQC,KAAI,SAACC,GACrD,IAAIC,EAAcD,EACJ,cAAVA,GAAmC,cAAVA,IAC3BC,EACEA,EAAYC,MAAM,GAAGC,cACrBF,EAAYC,MAAM,EAAG,GAAGE,cACxBH,EAAYC,MAAM,EAAG,IAIzB,IAFA,IAAIG,EAAYJ,EAEPK,EAAI,EAAGA,EAAIL,EAAYM,OAAQD,IACtC,GAAqC,MAAjCL,EAAYK,GAAGE,MAAM,SAAkB,CACzCH,EAAYJ,EAAYC,MAAM,EAAGI,GAAK,MAAQL,EAAYC,MAAMI,GAChE,MAIJ,OAAOZ,EAAMI,OAAOE,GAAS,IAA6B,IAAxBN,EAAMI,OAAOE,GAC7C,0BACES,IAAKT,EACLU,MAAO,CACLC,cAAe,aACfC,QAAS,eACTC,OAAQ,YACRC,OAAQ,oBACRC,gBAAiB,UACjBC,aAAc,SACdC,QAAS,cAGVZ,EAZH,IAYe,IACF,UAAVL,GAC0B,IAAvBN,EAAMI,OAAOoB,MACX,QACA,OACF,IAAMxB,EAAMI,OAAOE,GAAS,KAEhC,QAGN,OACE,yBAAKmB,UAAU,SACb,2CAAiBxB,GAEjB,qCACS,oCAAUD,EAAM0B,W,QCzCzBC,E,kLAEFC,KAAK5B,MAAM6B,cAAcD,KAAK5B,MAAM8B,MAAOF,KAAK5B,MAAM+B,U,+BAItD,IAAIf,EAAQ,CAAEO,QAAS,OACnBK,KAAK5B,MAAMgC,OAAOnB,OAAS,IAC7BG,EAAQ,CAAEO,QAAS,aAErB,IAAIS,EAAS,kBAACC,EAAA,EAAD,CAASC,OAAK,IAc3B,OAbKN,KAAK5B,MAAMmC,UACdH,EACE,yBAAKhB,MAAOA,GACTY,KAAK5B,MAAMgC,OAAO3B,KAAI,SAAC+B,GAAD,OACrB,kBAAC,EAAD,CACErB,IAAKqB,EAAMC,GACXjC,OAAQgC,EAAME,YACdZ,MAAOU,EAAMV,aAMhBM,M,GAxBUO,aA2CNC,uBAfS,SAACC,GACvB,MAAO,CACLT,OAAQS,EAAML,MAAMJ,OACpBG,QAASM,EAAML,MAAMD,QACrBL,MAAOW,EAAMC,KAAKZ,MAClBC,OAAQU,EAAMC,KAAKX,WAII,SAACY,GAC1B,MAAO,CACLd,cAAe,SAACC,EAAMC,GAAP,OAAkBY,EAASC,IAAoBd,EAAOC,QAI1DS,CAGbK,YAAiBlB,EAAQmB","file":"static/js/5.4edf0a20.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./Order.css\";\r\n\r\nconst Order = (props) => {\r\n  let ingredientSummary = Object.keys(props.counts).map((igKey) => {\r\n    let inputString = igKey;\r\n    if (igKey === \"pattyBeef\" || igKey === \"pattyPork\") {\r\n      inputString =\r\n        inputString.slice(5).toLowerCase() +\r\n        inputString.slice(0, 1).toUpperCase() +\r\n        inputString.slice(1, 5);\r\n    }\r\n    let newString = inputString;\r\n\r\n    for (var i = 0; i < inputString.length; i++) {\r\n      if (inputString[i].match(/[A-Z]/) != null) {\r\n        newString = inputString.slice(0, i) + \" - \" + inputString.slice(i);\r\n        break;\r\n      }\r\n    }\r\n\r\n    return props.counts[igKey] > 0 || props.counts[igKey] === false ? (\r\n      <span\r\n        key={igKey}\r\n        style={{\r\n          textTransform: \"capitalize\",\r\n          display: \"inline-block\",\r\n          margin: \"0 4px 2px\",\r\n          border: \"1px solid #eec162\",\r\n          backgroundColor: \"#d16f3e\",\r\n          borderRadius: \".25rem\",\r\n          padding: \"2px 4px 0\",\r\n        }}\r\n      >\r\n        {newString}:{\" \"}\r\n        {igKey === \"seeds\"\r\n          ? props.counts.seeds === true\r\n            ? \"(Yes)\"\r\n            : \"(No)\"\r\n          : \"(\" + props.counts[igKey] + \")\"}\r\n      </span>\r\n    ) : null;\r\n  });\r\n\r\n  return (\r\n    <div className=\"Order\">\r\n      <p>Ingredients: {ingredientSummary}</p>\r\n\r\n      <p>\r\n        Price: <strong>${props.price}</strong>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Order;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"../../axios-orders\";\r\nimport * as actions from \"../../store/actions/index\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport withErrorHandler from \"../../hoc/withErrorHandler/withErrorHandler\";\r\nimport Order from \"../../components/Order/Order\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\n\r\nclass Orders extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchOrders(this.props.token, this.props.userId);\r\n  }\r\n\r\n  render() {\r\n    let style = { padding: \"5px\" };\r\n    if (this.props.orders.length < 4) {\r\n      style = { padding: \"15vh 5px\" };\r\n    }\r\n    let orders = <Spinner light />;\r\n    if (!this.props.loading) {\r\n      orders = (\r\n        <div style={style}>\r\n          {this.props.orders.map((order) => (\r\n            <Order\r\n              key={order.id}\r\n              counts={order.ingredients}\r\n              price={order.price}\r\n            />\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n    return orders;\r\n  }\r\n}\r\n\r\nconst mapStatetoProps = (state) => {\r\n  return {\r\n    orders: state.order.orders,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId\r\n  };\r\n};\r\n\r\nconst mapDispatchtoProps = (dispatch) => {\r\n  return {\r\n    onFetchOrders: (token,userId) => dispatch(actions.fetchOrders(token, userId)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStatetoProps,\r\n  mapDispatchtoProps\r\n)(withErrorHandler(Orders, axios));\r\n"],"sourceRoot":""}